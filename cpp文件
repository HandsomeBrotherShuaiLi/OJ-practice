//poj_1611_并查集


#include<iostream>
#include<vector>
#include<algorithm>
#include<set>
using namespace std;
int parent[30001];
int find(int* p,int r)
{
	while(p[r]!=r)
		r=p[r];
	return r;
}
int main()
{
	int n,m;
	while(1)
	{
		cin>>n>>m;
		
		if(n==0&&m==0)
			break;
		else if(m==0)
		{
			cout<<n<<endl;
		}
		else{
			set<int> sum;
			for(int i=0;i<n;i++)
			{
				parent[i]=i;
			}
			for(int i=0;i<m;i++){
			int zu;
			int x;
			int y;
			cin>>zu>>x;
			sum.insert(x);
			for(int j=1;j<zu;j++)
			{
				cin>>y;
				sum.insert(y);
				int a=find(parent,x);
				int b=find(parent,y);
				if(a>b)
				{
					parent[a]=b;
				}
				else if(a<b)
				{
					parent[b]=a;
				}
				x=y;
			}
			
			}
			sum.insert(0);
			int ans=0;
			set<int>::iterator it;
			for(it=sum.begin();it!=sum.end();it++)
			{
				if(find(parent,*it)==0)
					ans++;
			}
			cout<<ans<<endl;
}
	}

	return 0;
}


//poj_2524_并查集

#include<iostream>
#include<algorithm>

using namespace std;
int parent[50001];
int find(int* p,int r)
{
	while(p[r]!=r)
		r=p[r];
	return r;
}
int main()
{
	int n,m;
	int c=0;
	while(1)
	{
		cin>>n>>m;
		
		if(n==0&&m==0)
			break;
		else if(m==0)
		{
			c++;
			cout<<"Case "<<c<<": "<<n<<endl;
		}
		else{
			c++;
			
			for(int i=0;i<n;i++)
			{
				parent[i]=i;
			}
			int ans=n;
			for(int i=0;i<m;i++){
			
			int x;
			int y;
			cin>>x>>y;
			int a=find(parent,x);
            int b=find(parent,y);
				if(a>b)
				{
					parent[a]=b;
					ans--;
				}
				else if(a<b)
				{
					parent[b]=a;
					ans--;
				}
			}
        cout<<"Case "<<c<<": "<<ans<<endl;
		}
	}
  return 0;
}

ccf csp_分蛋糕
#include<iostream>
#include<vector>
#include<algorithm>
#include<cstring> 
using namespace std;
int main()
{
	int n,k,x;
	cin>>n>>k;
	vector<int> cake;
	for(int i=0;i<n;i++)
	{
		cin>>x;
		cake.push_back(x);
	}
	int f=0;
	int sum=0;
	for(int i=0;i<n;i++)
	{
	  sum+=cake[i];
	  if(sum>=k)
	  {
	  	f++;
	  	sum=0;
	  }
	 }
	 if(sum>0)
	 f++;
    cout<<f<<endl;
    return 0;
} 


//ccf_csp 排队
#include<iostream>
#include<algorithm>
using namespace std;
int d[1001];
int find(int* a,int n,int x)
{
	int i=0;
	for(;i<n;i++)
	{
		if(a[i]==x)
		break;
	 } 
	 return i;
}

void exchange(int* d,int n,int p,int q)//p从0开始 
{
	if(q>0&&p+q>=n-1)
	{
		int tmp=d[p];
		for(int j=p+1;j<=n-1;j++)
		d[j-1]=d[j];
		d[n-1]=tmp;
	}
	if(q>0&&p+q<n-1)
	{
		int tmp=d[p];
		for(int j=p+1;j<=p+q;j++)
		d[j-1]=d[j];
		d[p+q]=tmp;
	}
	if(q<0&&p+q<=0)
	{
		int tmp=d[p];
		for(int j=p-1;j>=0;j--)
		{
			d[j+1]=d[j];
		}
		d[0]=tmp;
	}
	if(q<0&&p+q>0)
	{
		int tmp=d[p];
		for(int j=p-1;j>=p+q;j--)
		d[j+1]=d[j];
		d[p+q]=tmp;
	}
}
int main()
{
   
   int n,m,p;
   int q;
   cin>>n;
   cin>>m;
   for(int i=0;i<n;i++)
   d[i]=i+1;
   for(int i=0;i<m;i++)
   {
   	cin>>p>>q;
   	int j=find(d,n,p);
   	exchange(d,n,j,q);
   }
   for(int i=0;i<n;i++)
   cout<<d[i]<<" ";
    return 0;
} 

//leetcode  102
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> ans;
    void func(TreeNode* root,int dept)//dfs 只不过是加上记录层数
    {
        if(root==NULL)  return;
        if(ans.size()==dept)
            ans.push_back(vector<int>());
        ans[dept].push_back(root->val);
        func(root->left,dept+1);
        func(root->right,dept+1);
    }
    vector<vector<int>> levelOrder(TreeNode* root) {
        func(root,0);
        return ans;
    }
};
//hdoj 1016  dfs
#include<iostream>
#include<algorithm>
#include<stdio.h>
#include<math.h>
using namespace std;
int num[21];
bool use[21];
int n;
 bool isPrime(int x)
 {
 	for(int i=2;i<=sqrt(x);i++)
 	{
 		if(x%i==0)
 		  return false;
	 }
	 return true;
 }
 void func(int x)//第x位数取值函数 
 {
 	if(x==n)
 	{
 		 if(isPrime(num[n-1]+1))
		 {
		 	for(int i=0;i<n-1;i++)
		 	cout<<num[i]<<" ";
		 	cout<<num[n-1]<<endl;
		 	return;
		 }
	 }
	 else{
	 	for(int i=2;i<=n;i++)
	 	{
	 		if(use[i]==false && isPrime(num[x-1]+i))
	 		{
	 			num[x]=i;
	 			use[i]=true;
	 			func(x+1);
	 			use[i]=false;
			 }
		 }
	 }
 }
 int main()
 {
 	int cx=1;
 	while(scanf("%d",&n)!=EOF)
 	{
 		for(int i=2;i<=n;i++)
 		{
 			use[i]=false;
		 }
		 num[0]=1;
		 use[1]=true;
		  printf("Case %d:\n",cx);
		 func(1);
		 cout<<endl;
		 cx++;
	 }
	 return 0;
 }

 //hdoj 1181 dfs
 #include<stdio.h>  
#include<string.h>  
#include<algorithm>  
using namespace std;  
char ch[1111][1111];  
int n,use[1111];  
int F;  
void dfs(int x)  
{  
    int l=strlen(ch[x]);  
    if(ch[x][l-1]=='m')  
    {  
        F=1;  
        return;  
    }  
    for(int j=0;j<n;j++)  
    {  
        if(ch[x][l-1]==ch[j][0]&&use[j]==0)  
        {  
            use[j]=1;  
            dfs(j);  
            use[j]=0;  
        }  
    }  
}  
int main()  
{  
    while(~scanf("%s",ch[0]))  
    {  
        memset(use,0,sizeof(use));  
        int i,flag=0;  
        n=1;F=0;  
        while(1)  
        {  
            scanf("%s",ch[n]);  
            int l=strlen(ch[n]);  
            if(ch[n][l-1]=='m')  
                flag=1;  
            if(ch[n][0]=='0')  
                break;  
            n++;  
        }  
        if(!flag)  
            printf("No.\n");  
        else  
        {  
            for(i=0;i<n;i++)  
            {  
                if(ch[i][0]=='b')  
                    dfs(i);  
            }  
            if(F)  
                printf("Yes.\n");  
            else  
                printf("No.\n");  
        }     
    }  
    return 0;  
}  

or:

#include<iostream>
#include<algorithm>
#include<stdio.h>
#include<math.h>
#include<string>
#include<vector>
using namespace std;
bool mark[10000000];

void dfs(vector<string> s,int num,char j,int & ans)//从0开始 
 {
	 
 	if(*(s[num].end()-1)=='m'&&*(s[num].begin())==j)
 	{
 	  ans=1;
	  mark[num]=true;
 	  return;
 	}
	unsigned int sum=0;
	for(unsigned int i=0;i<s.size();i++)
		if(mark[i]==true)
			sum++;
	if(sum==s.size())
		return;

	if(*(s[num].begin())==j)
	{
	 
	  for( int i=0;i<int(s.size());i++)
	  {
	  	if(*(s[i].begin())==*(s[num].end()-1)&&!mark[i])
	    {  
			mark[num]=true;
		    dfs(s,i,*(s[i].begin()),ans);
		    mark[i]=false;
		}
	  }
	}
}
 int main()
 {
 
 	char ch;
	
 	while((ch=getchar())!=EOF)
 	{
 		string tmp;
 		vector<string>zouyu;
 	    int ans=0;
 		while(cin>>tmp && tmp[0]!='0')
 		{
 			zouyu.push_back(tmp);
 		}
		for(int i=0;i<int(zouyu.size());i++)
			mark[i]=false;
		for(int i=0;i<int(zouyu.size());i++)
		   dfs(zouyu,i,'b',ans);
		  if(ans==1)
		  cout<<"Yes."<<endl;
		  else
		  cout<<"No."<<endl;
		ans=0;
		zouyu.clear();

	 }
	 return 0;
 }
 
